{"version":3,"sources":["components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","display","media","height","Profile","username","name","email","classes","Card","className","CardActionArea","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","color","theme","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","App","useState","users","setUsers","isLoading","setIsLoading","error","setError","page","setPage","fetchUsers","fetch","then","response","json","data","console","log","catch","useEffect","window","onscroll","document","documentElement","scrollTop","offsetHeight","innerHeight","message","map","user","Grid","container","item","xs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6QAUMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,QAAQ,UAEVC,MAAO,CACLC,OAAQ,OA6BGC,EAzBD,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MACtBC,EAAUX,IAGhB,OACE,cAACY,EAAA,EAAD,CAAMC,UAAWF,EAAQT,KAAzB,SACA,eAACY,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEF,UAAWF,EAAQN,MACnBW,MAPI,sEAQJC,MAAOT,IAET,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,KAAhD,SACGb,IAEH,cAACU,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,IAA5D,SACEZ,a,sBC3BJV,EAAYC,aAAW,SAACuB,GAAD,MAAY,CACvCtB,KAAM,CACJuB,SAAU,GAEZC,MAAO,CACLC,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACXN,MAAOC,EAAMM,QAAQC,KAAKC,eAgGfC,EA3FL,WACQjC,IAAhB,IADa,EAOOkC,mBAAS,IAPhB,mBAOTC,EAPS,KAOHC,EAPG,OAQeF,oBAAS,GARxB,mBAQTG,EARS,KAQCC,EARD,OASOJ,mBAAS,MAThB,mBASTK,EATS,KASHC,EATG,OAUKN,mBAZF,GAEH,mBAUTO,EAVS,KAUJC,EAVI,KAYTC,EAAW,WAEfC,MAAM,8CAEHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZZ,EAAS,GAAD,mBAAKD,GAAL,YAAea,KACvBV,GAAa,MAKda,OAAM,SAAAZ,GAAK,OAAIC,EAAS,CAACD,YAAQD,GAAa,KACnDc,qBAAU,WAEVT,MACG,IAkBD,OAVFU,OAAOC,SAAS,WACdL,QAAQC,IAAIG,OAAOE,SAASC,gBAAgBC,UAAUF,SAASC,gBAAgBE,cAE7EL,OAAOM,YAAcJ,SAASC,gBAAgBC,WAAaF,SAASC,gBAAgBE,eATtFhB,EAAQD,EAAK,GACbH,GAAa,GAEbK,IACAM,QAAQC,IAAIT,GAQVQ,QAAQC,IAAI,UAKZ,gCAaEX,EAAQ,4BAAIA,EAAMqB,UAAe,KAE/BvB,EAmBA,4CAlBAF,EAAM0B,KAAI,SAAAC,GAAS,IACTtD,EAA0BsD,EAA1BtD,SAAUC,EAAgBqD,EAAhBrD,KAAMC,EAAUoD,EAAVpD,MACxB,OAME,aALA,CAKCqD,EAAA,EAAD,CAAMC,WAAS,EAACpC,QAAS,EAAzB,SACA,cAACmC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACC,cAAC,EAAD,CAAwBzD,KAAMA,EAAMC,MAAOA,GAA7BF,cCrFZ2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BX,M","file":"static/js/main.fd4eb774.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n    display:\"center\"\r\n  },\r\n  media: {\r\n    height: 140,\r\n  }\r\n});\r\n\r\nconst Profile=({username,name,email})=> {\r\n  const classes = useStyles();\r\n  const img=\"https://avatars.dicebear.com/api/male/john.svg?background=%230000ff\"\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n    <CardActionArea>\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={img}\r\n        title={username}\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          {name}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n         {email}\r\n        </Typography>\r\n      </CardContent>\r\n    </CardActionArea>\r\n    \r\n  </Card>\r\n  );\r\n}\r\nexport default Profile;","\nimport './App.css';\nimport { useState,useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport Profile from './components/Profile';\nimport axios from 'axios';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\nconst PAGE_NUMBER=1;\n\nconst App=()=> {\n  const classes = useStyles();\n// let options = {};\n// let avatars = new Avatars(sprites, options);\n// let svg = avatars.create('custom-seed');\n// console.log(svg);\n\nconst[users,setUsers]=useState([]);\nconst[isLoading,setIsLoading]=useState(true);\nconst[error,setError]=useState(null);\nconst[page,setPage]=useState(PAGE_NUMBER);\n\nconst fetchUsers=()=> {\n  // Where we're fetching data from\n  fetch(`https://jsonplaceholder.typicode.com/users`)\n    // We get the API response and receive data in JSON format...\n    .then(response => response.json())\n    // ...then we update the users state\n    .then((data) =>{\n      console.log(data);\n      setUsers([...users, ...data]);\n      setIsLoading(false);\n      \n    })\n    \n    // Catch any errors we hit and update the app\n    .catch(error => setError({error}),setIsLoading(false));}\nuseEffect(() => {\n\nfetchUsers();\n}, []);\nconst scrollToEnd=()=>{\n  setPage(page+1);\n  setIsLoading(true);\n  //console.log(isLoading)\n  fetchUsers();\n  console.log(page)\n}\nwindow.onscroll=function(){\n  console.log(window,document.documentElement.scrollTop,document.documentElement.offsetHeight)\n  if(\n    window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight\n  ){\n    scrollToEnd()\n    console.log(\"here\")\n  }\n}\n\n  return (\n    <div>\n     {/* <InfiniteScroll\n          dataLength={this.state.items.length}\n          next={this.fetchMoreData}\n          hasMore={true}\n          loader={<h4>Loading...</h4>}\n        >\n          {this.state.items.map((i, index) => (\n            <div style={style} key={index}>\n             <Profile userName={userName} email={email}/> \n            </div>\n          ))}\n        </InfiniteScroll>     */}\n     {error ? <p>{error.message}</p> : null}\n      {/* // Here's our data check */}\n      {!isLoading ? (\n        users.map(user => {\n          const { username, name, email } = user;\n          return (\n            // <div key={username}>\n            //   <p>Name: {name}</p>\n            //   <p>Email Address: {email}</p>\n            //   <hr />\n            // </div>\n            <Grid container spacing={3}>\n            <Grid item xs={12}>\n             <Profile key={username} name={name} email={email}/>\n            </Grid>\n            </Grid>\n            \n          );\n        })\n      // If there is a delay in data, let's let the user know it's loading\n      ) : (\n        <h3>Loading...</h3>\n      )}\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}